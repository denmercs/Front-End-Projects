Using console.log in Javascript

## Log to console

    console.log('hello world');
    console.log(123);
    console.log(true);
    var greeting = 'Hello';
    console.log(greeting);
    console.log([1,2,3,4,5]);
    console.log({a:1, b:2});
    console.table({a:1, b:2});

    console.error('This is some error');
    console.clear();
    console.warn('This is a warning');

    console.time('Hello');
        console.log('hello world');
        console.log('hello world');
        console.log('hello world');
    console.timeEnd('Hello');

## Variables (var, let, and const)
    // var, let, const

        var name = 'Dennis Mercado';
        console.log(name);
        name = 'Steve Smith';
        console.log(name);

    // init var

        var greeting;
        console.log(greeting);
        greeting = 'Hello';
        console.log(greeting);

    // Rules and conventions (includes letters, number, _, and $)
        // Cannot start with a  number
            //var 1name = 'John';

        // global
        var _name = 'John';

        // multi word vars
        var firstName = 'John'; //Camel case
        var first_name = 'Sara'; //Underscore
        var FirstName = 'Tom'; //Pascal case
        var firstname;

    // Let
        let name;
        name = 'John Doe';
        console.log(name);
        name = 'Steve Smith';
        console.log(name);


    // CONST
            const name = 'John';
            console.log(name);

        //cannot re-assign
            //name = 'Sara';
        //Have to assign a value
            //const greeting;

        // objects
            const person = {
                name: 'John',
                age: 30
            }
            person.name = 'Sara';
            person.age = 32;
            console.log(person);

        // Arrays
            const numbers = [1,2,3,4,5];
            numbers.push(6);
            console.log(numbers);

## Data Types
    /*
        Primitive Data Types:
        - stored directly in the lcoation the variable accesses
        - stored on the stack

        Reference Data Types:
        - Accessed by Reference
        - Objects that are stored on the heap
        - A pointer to a location in memory

        Primitive Data Types
        - String
        - Number
        - Boolean
        - Null
        - Undefined
        - Symbols (ES6)

        Reference Data Types / Objects
        - Arrays
        - Object Literals
        - Functions
        - Dates
        - Anything you can store

        Dynamically Typed Language
        - Types are associated with values not variables
        - The same variable can hold multiple types
        - we do not need to specify types
        - most other languages are statically typed (Java, C#, C++)
        - There are supersets of JS and addons to allow static typing (typescript, flow)
    */

    // PRIMITIVE

        //STRING
        const name = 'John Doe';
        console.log(typeof name);

        //NUMBER
        const age = 45;
        console.log(typeof age);

        // BOOLEAN
        const hasKids = true;
        console.log(hasKids);

        // NULL
        const car = null;
        console.log(typeof car);

        // UNDEFINED
        let test;
        console.log(typeof test);

        // SYMBOL
        const sym = Symbol();
        console.log(sym);

        //REFERENCE TYPE - OBJECTS
        //Array
        const hobbies = ['movies', 'music'];
        console.log(typeof hobbies);

        // Objects Literal
        const address = {
            city: 'Boston',
            state: 'MA'
        }
        const today = new Date();
        console.log(today);
        console.log(typeof today);


## TYPE CONVERSION
        let val;

        // Number to STRING
        val = String(555);
        val = String(4+4);

        // Bool to STRING
        val = String(true);

        // Date to sTring
        val = String(new Date());

        // Array to String
        val = String([1,2,3,4]);

        // toString()
        val = (5).toString();
        val = (true).toString();

        // String to number
        val = Number('5');
        val = Number(true);
        val = Number(false);
        val = Number(null);
        val = Number('Hello');
        val = Number([1,2,3]);
        val = parseInt('100.30'); // for integer
        val = parseFloat('100.30'); // for decimal

        const val1 = String(5);
        const val2 = 6;
        const sum = Number(val1 + val2);
        console.log(sum);
        console.log(typeof sum);

        // Output
        console.log(val);
        console.log(typeof val);
        //console.log(val.length);
        console.log(val.toFixed(2));


## Math OPERATORS

    const num1 = 100;
    const num2 = 50;
    let val;

    // Simple math with numbers
        val = num1 + num2;
        val = num1 * num2;
        val = num1 - num2;
        val = num1 / num2;
        val = num1 % num2;

    // Math Object
        val = Math.PI;
        val = Math.E;
        val = Math.round(2.8);
        val = Math.ceil(2.4);
        val = Math.floor(2.8);
        val = Math.sqrt(64);
        val = Math.abs(-3);
        val = Math.pow(8, 2);
        val = Math.min(2, 33, 4, 1, 55, 6, 3);
        val = Math.max(2, 33, 4, 1, 55, 6, 3);
        val = Math.random();
        val = Math.floor(Math.random() * 20 + 1);
        console.log(val);

## String method and concatenation
        const firstName = 'William';
        const lastName = 'Johnson';
        const age = 36;
        const str = 'Hello there my name is Dennis';
        const tags = 'web design, web development, programming';
        let val;

        val = firstName + lastName;

    // Concatenation
        val = firstName + ' ' + lastName;

    // Append
        val = 'Dennis ';
        val += 'Mercado';

        val = 'Hello, my name is ' + firstName + ' and I am ' + age;

    // Escaping
        val = "That's awesome, I can't wait it";
        val = 'That\'s awesome, I can\'t wait it';

    // Length
        val = firstName.length;

    // concat
        val = firstName.concat(' ', lastName);

    //changed case
        val = firstName.toUpperCase();
        val = firstName.toLowerCase();

    // index of arrays
        val = firstName[0];

    // index of
        val = firstName.indexOf('l');
        val = firstName.lastIndexOf('l');

    // charAt()
        val = firstName.charAt('2');

    // Get last char
        val = firstName.charAt(firstName.length - 1);

    // substring
        val = firstName.substring(0, 4);

    // slice
        val = firstName.slice(-3);

    // split
        val = str.split(' ');
        val = tags.split(',');

    // replace
        val = str.replace('Dennis', 'Jack');

    // includes
        val = str.includes('Hello');

        console.log(val);

## Template Literals
    const name = 'Dennis';
    const age = 30;
    const job = 'web developer';
    const city = 'madison';
    let html;


    // Without Tempalte Strings
    html = '<ul><li>Name: ' + name + '</li><li>Age: ' + age +
        '</li><li>' + job + '</li><li>City: ' + city + '</li></ul>';

    html = '<ul>' +
        '<li>Name: ' + name + '</li>' +
        '<li>Name: ' + age + '</li>' +
        '<li>Name: ' + job + '</li>' +
        '<li>Name: ' + city + '</li></ul>';

    function hello() {
        return 'Hello';
    }

    // With template strings (es6)
    html = `
        <ul>
            <li>Name: ${name}</li>
            <li>Age: ${age}</li>
            <li>Job: ${job}</li>
            <li>City: ${city}</li>
            <li>${2 + 2}</li>
            <li>${hello()}</li>
            <li>${age > 30 ? 'Over 30 ' : 'Under 30'}</li>
        </ul>
    `;

    document.body.innerHTML = html;


## Arrays and Arrays Method
    //Create some arrays
    const numbers = [43, 56, 33, 23, 44, 36, 5];
    const number2 = new Array(22, 45, 33, 76, 54);
    const fruit = ['Apple', 'Banana', 'Orange', 'Pear'];
    const mixed = [22, 'Hello', true, undefined, null, {a:1, b:1}, new Date()];

    // console.log(mixed);

    let val;

    // Array length
    val = numbers.length;

    // Check if is array
    val = Array.isArray(numbers);

    // Get single value
    val = numbers[3];
    val = numbers[0];

    // Insert into array
    numbers[2] = 100;

    // Find index of a value
    val = numbers.indexOf(36);

    // Mutating Arrays
    //add on to end
    numbers.push(250);

    //add on to front
    numbers.unshift(120);

    // take of from end
    numbers.pop();

    // take of from the start
    numbers.shift();

    // Splice values
    numbers.splice(1, 3);

    // reverse
    numbers.reverse();

    concatenate arrays
    val = numbers.concat(numbers);

    // sorting of arrays
    val = fruit.sort();
    val = numbers.sort();

    // use the 'compare function'
    val = numbers.sort(function(x, y) {
        return x - y;
    })

    // reverse sort
    val = numbers.sort(function(x, y) {
        return y - x;
    })

    // Find
    function under50(num) {
        return num < 50;
    }

    val = numbers.find(under50);

    console.log(numbers);
    console.log(val);


## Object Literals
    const person = {
        firstName: 'Dennis',
        lastName: 'Smith',
        age: 35,
        email: 'steve@aol.com',
        hobbies: ['music', 'sports'],
        address: {
            city: 'Miami',
            state: 'FL'
        },
        getBirthYear: function() {
            return 2017 - this.age;
        }
    }

    let val;

    val = person;

    // Get specific value
    val = person.firstName;
    val = person['firstName'];
    val = person.lastName;
    val = person.age;
    val = person.hobbies;
    val = person.hobbies[1];
    val = person.address.state;
    val = person.address['city'];
    val = person.getBirthYear();

    const people = [
        {name: 'Dennis', age: 30},
        {name: 'Mike', age: 23},
        {name: 'Nancy', age: 25}
    ]

    for(let i = 0; i < people.length; i++){
        console.log(people[i].name);
    }


    console.log(val);


## Date and Time

    let val;
    const today = new Date();
    let birthday = new Date('September 10 1981');
    birthday = new Date('9/10/1981');
    val = today.getMonth();
    val = today.getDate();
    val = today.getDay();
    val = today.getHours();
    val = today.getMinutes();
    val = today.getSeconds();
    val = today.getMilliseconds();
    val = today.getTime();

    birthday.setMonth(2);
    birthday.setDate(12);
    birthday.setFullYear(1976);
    birthday.setHours(3);
    birthday.setMinutes(25);
    birthday.setSeconds(25);

    console.log(val);
    console.log(birthday);

## If statement and conditions
    // if(something) {
    //     do something
    // } else {
    //     do something else
    // }

    const id = 100;

    // Equal to
    if (id == 101){
        console.log('This is true and correct');
    } else {
        console.log('It\'s wrong');
    }

    // Not equal to
    if (id != 100) {
        console.log('It\'s not equal');
    } else {
        console.log('It\'s equal');
    }

    // Equal to value and type
    if (id === 100) {
        console.log('correct');
    } else {
        console.log('incorrect');
    }

    // not equal to value and type
    if (id !== 100) {
        console.log('correct');
    } else {
        console.log('incorrect');
    }

    // Test if undefined
    if (typeof id !== undefined) {
        console.log(`The ID is ${id}`);
    } else {
        console.log('No ID');
    }

    // Greater or less than
    if (id >= 200) {
        console.log('greater than');
    } else {
        console.log('not greater than');
    }

    // If else
    const color = 'yellow';

    if (color === 'red') {
        console.log('Color is red');
    } else if (color === 'blue') {
        console.log('Color is blue');
    } else {
        console.log('color is yellow');
    }

// Logical OPERATORS
    const name = 'Jackie';
    const age = 36;

    // AND &&
    if (age > 0 && age < 12) {
        console.log(`${name} is a child`);
    } else if (age >= 13 && age <= 19) {
        console.log(`${name} is a teenager`);
    } else {
        console.log(`${name} is an adult`);
    }

    // OR ||
    if (age < 16 || age > 65) {
        console.log(`${name} cannot run in race`);
    } else {
        console.log(`${name} is registered for the race`);
    }

    // Ternary operator
    console.log(id === 100 ? 'correct' : 'incorrect');

    // without braces
    if (id === 100)
        console.log('the id is correct');
    else
        console.log('the id is incorrect');

## Switches
    const color = 'red';

    switch (color) {
        case 'red':
            console.log('color is red');
            break;
        case 'blue':
            console.log('color is blue');
            break;
        default:
            console.log('color is not red or blue');
            break;
    }

    let day;
    switch(new Date().getDay()) {
        case 0:
            day = 'Sunday';
            break;
        case 1:
            day = 'Monday';
            break;
        case 2:
            day = 'Tuesday';
            break;
        case 3:
            day = 'Wednesday';
            break;
        case 4:
            day = 'Thursday';
            break;
        case 5:
            day = 'Friday';
            break;
        case 6:
            day = 'Saturday';
            break;
    }

    console.log(`today is ${day}`);


## Functions
    // Function declaration

    function greet(firstName = 'John', lastName = 'Doe') {
        return 'hello ' + firstName + ' ' + lastName;
    }

    console.log(greet());

    // function expressions
    const square = function(x) {
        return x * x;
    };

    console.log(square(8));

    // Immediately invokable function expressions - IIFE's
    (function() {
        console.log('IIFE Ran');
    })();

    (function(name) {
        console.log('Hello ' + name);
    })('Brad');

    // Property methods
    const todo = {
        add: function() {
            console.log('Add todo...');
        },
        edit: function(id) {
            console.log(`Edit to do ${id}`);
        }
    }
    todo.delete = function() {
        console.log('Delete to do...');
    }

    todo.add();
    todo.edit(22);
    todo.delete();

## Loops
    // For loop
    for(let i = 0; i < 5; i++) {
        // console.log(`Printing ${i}`);
        if(i === 2) {
            console.log('2 is my favorite number');
            continue;
        }

        if(i === 3) {
            console.log('stop the loop');
            break;
        }

        console.log('number ' + i);
    }


    // While loop
    let i = 0;
    while(i < 10) {
        console.log('Number ' + i);
        i++;
    }

    // Do While loop
    let y = 0;
    do {
        console.log('Number' + y);
        i++;
    } while(y < 10);

    // Array looping
    const cars = ['Ford', 'Chevy', 'Honda', 'Toyota'];
    for(let i = 0; i < cars.length; i++) {
        console.log(cars[i]);
    }

    cars.forEach(function(car, index, array) {
        console.log(`${index} : ${car}`);
        console.log(array);
    });

    // Map
    const users = [
        {id: 1, name: 'Dennis'},
        {id: 2, name: 'Jackie'},
        {id: 3, name: 'Karen'}
    ];

    const ids = users.map(function(user){
        return user.id;
    });

    console.log(ids);

    const user = {
        firstName: 'John',
        lastName: 'Doe',
        age: 40
    }

    for(let x in user) {
        console.log(`${x} : ${user[x]}`;
    }

## Window Objects
    /* Window object */

    // alert
    // alert('Hello World');

    // Prompt
    // const input = prompt();
    // alert(input);

    // confirm --> Use on deleting situation
    // if (confirm('Are you sure?')) {
    //     console.log('YES');
    // } else {
    //     console.log('NO');
    // }

    let val;

    // Outer height and width
    val = window.outerHeight;
    val = window.outerWidth;


    // Inner height and width
    val = window.innerHeight;
    val = window.innerWidth;

    // Scroll points
    val = window.scrollY;
    val = window.scrollX;

    // Location Objects
    val = window.location;
    val = window.location.hostname;
    val = window.location.port;
    val = window.location.href;
    val = window.location.search;

    // Redirect
    //window.location.href = 'http://google.com';

    // Reload
    //window.location.reload();

    // History object
    //window.history.go(-1);
    val = window.history.length;

    // Navigator Object
    val = window.navigator;
    val = window.navigator.appName;
    val = window.navigator.appVersion;
    val = window.navigator.userAgent;
    val = window.navigator.platform;
    val = window.navigator.vendor;
    val = window.navigator.language;

    console.log(val);

    // Global Scope
    var a = 1;
    let b = 2;
    const c = 3;

    // Function scope
    function test() {
        var a = 4;
        let b = 5;
        const c = 6;
        console.log('Function scope ', a, b, c);
    }

    if (true) {
        // block scope
        var a = 4;
        let b = 5;
        const c = 6;
        console.log('If scope ', a, b, c);
    }

    for (let a = 0; a < 10; a++) {
        console.log(`loop ${a}`);
    }

    console.log('Global scope ', a, b, c);

    test();

    /** Let and const has a block level scope and var has a function scope **/


    /** DOM **/
    /*
        Tree of nodes/elements created by the browser
        Javascript can be used to read/write/manipulate to the DOM
        Object Oriented Representation
    */
    let val;
    val = document; // selecting all the tags
    val = document.all[2]; // accessing the item in the document
    val = document.all.length;
    val = document.head;
    val = document.body;
    val = document.doctype;
    val = document.domain;
    val = document.URL;
    val = document.characterSet;
    val = document.contentType;

    val = document.forms;
    val = document.forms[0];
    val = document.forms[0].id;
    val = document.forms[0].method;
    val = document.forms[0].action;

    val = document.links;
    val = document.links[0];
    val = document.links[0].id;
    val = document.links[0].className;
    val = document.links[0].classList[0];

    val = document.images;

    val = document.scripts;
    val = document.scripts[2].getAttribute('src');

    let scripts = document.scripts;

    let scriptsArr = Array.from(scripts);

    scriptsArr.forEach(function(scripts) {
        console.log(scripts.getAttribute('src'));
    });

    console.log(val);


/** DOM FOR SINGLE SELECTORS **/

    // document.getElementById()
    console.log(document.getElementById('task-title'));

    // Get things from the element
    console.log(document.getElementById('task-title').id);
    console.log(document.getElementById('task-title').className);

    const taskTitle = document.getElementById('task-title');

    // Change styling
    taskTitle.style.background = '#333';
    taskTitle.style.color = '#fff';
    taskTitle.style.padding = '5px';
    // document.getElementById('task-title').style.display = 'none';

    // Change Content
    taskTitle.textContent = 'Task List';
    taskTitle.innerText = 'My Tasks';
    taskTitle.innerHTML = '<span style="color:red"> Task List </span>';

    // Query selector
    console.log(document.querySelector('#task-title'));
    console.log(document.querySelector('.card-title'));
    console.log(document.querySelector('h5'));

    document.querySelector('li').style.color = 'red'; // It's going to get the first one
    document.querySelector('ul li').style.color = 'blue';
    document.querySelector('li:last-child').style.color = 'red';
    document.querySelector('li:nth-child(3)').style.color = 'yellow';
    document.querySelector('li:nth-child(4)').textContent = 'Hello World!';
    document.querySelector('li:nth-child(odd)').style.background = '#ccc';

/** DOM FOR MULTIPLE SELECTORS **/

    // document.getElementsByClassName

    const items = document.getElementsByClassName('collection-item');
    console.log(items);
    console.log(items[0]);
    items[0].style.color = 'red';
    items[3].textContent = 'Hello';

    const listItems = document.querySelector('ul').getElementsByClassName('collection-item');
    console.log(listItems);

    //document.getElementsByTagName
    let lis = document.getElementsByTagName('li');
    console.log(lis);
    lis[0].style.color = 'red';
    lis[3].textContent = 'Hello';

    // Convert HTML collection into an array
    lis= Array.from(lis);

    lis.reverse();
    lis.forEach(function(li, index){
        console.log(li.className);
        li.textContent = `${index}: Hello`;
    });

    console.log(lis);

    // document.querySelectorAll

    const itemsTest = document.querySelectorAll('ul.collection li.collection-item');
    itemsTest.forEach(function(item, index){
        item.textContent = `${index}: Hello`;
    });

    const liOdd = document.querySelectorAll('li:nth-child(odd)');
    const liEven = document.querySelectorAll('li:nth-child(even)');

    liOdd.forEach(function(li, index){
        li.style.background = '#ccc';
    });

    for(let i = 0; i < liEven.length; i++) {
        liEven[i].style.background = '#f4f4f4';
    }

    console.log(itemsTest);

/** Traversing the DOM **/

/** traverse means moving up and down **/

    let val;

    const list = document.querySelector('ul.collection');
    const listItem = document.querySelector('li.collection-item:first-child');

    val = listItem;
    val = list;

    // Get child nodes
    val = list.childNodes;
    val = list.childNodes[0];
    val = list.childNodes[0].nodeName;
    val = list.childNodes[3].nodeType;

    /**
        1 -  Element`
        2 - Attribute
        3 - Text Nodes
        8 - Comment
        9 - Document itself
        10 - Doctype
    **/

    // Get children element nodes
    val = list.children;
    val = list.children[1];
    val = list.children[1].textContent = 'Hello';

    // Get children of children
    list.children[3].children[0].id = 'test-link';
    val = list.children[3].children;

    val = list.firstChild;
    val = list.firstElementChild;
    val = list.lastChild;
    val = list.lastElementChild;

    // Count child elements
    val = list.childElementCount;

    // Get parent node
    val = listItem.parentNode;
    val = listItem.parentElement;
    val = listItem.parentElement.parentElement;

    // Get siblings
    val = listItem.nextSibling;
    val = listItem.nextElementSibling;
    val = listItem.nextElementSibling.nextElementSibling.previousElementSibling;

    // Get previous sibling
    val = listItem.previousSibling;
    val = listItem.previousElementSibling;

    console.log(val);

/** CREATING ELEMENTS **/
    // Create Element

    const li = document.createElement('li');

    // Add class
    li.className = 'collection-item';

    // Add ID
    li.id = 'new-item';

    // Add attribute
    li.setAttribute('title', 'New Item');

    // Create a text node and append
    li.appendChild(document.createTextNode('Hello world!'));

    // Create new link element
    const link = document.createElement('a');

    //add a class
    link.className = 'delete-item secondary-content';

    //add icon html
    link.innerHTML = '<i class="fa fa-remove"></i>'

    //append link into li
    li.appendChild(link);

    // Append li as child to ul
    document.querySelector('ul.collection').append(li);

    console.log(li);


/** Replace Element **/

    //Create Element

    const newHeading = document.createElement('h2');

    //Add id
    newHeading.id = 'task-title';

    //New Text Node
    newHeading.appendChild(document.createTextNode('Task List'));

    // Get the old heading
    const oldHeading = document.getElementById('task-title');

    //Parent
    const cardAction = document.querySelector('.card-action');
    cardAction.replaceChild(newHeading, oldHeading);

    console.log(newHeading);

    // Remove Element
    const li = document.querySelectorAll('li');
    const list = document.querySelector('ul');

    // remove list item
    li[0].remove();

    // remove by child element
    list.removeChild(li[3]);

    // Classes and attributes
    const firstLi = document.querySelector('li:first-child');
    const link = firstLi.children[0];

    console.log(firstLi.children[0]);

    let val;

    // classes
    val = link.className;
    val = link.classList;
    val = link.classList[0];
    link.classList.add('test');
    link.classList.remove('test');
    val = link;

    //Attributes
    val = link.getAttribute('href');
    val = link.setAttribute('href', 'http://google.com');
    link.setAttribute('title', 'Google');
    val = link.hasAttribute('href');
    val = link.removeAttribute('title');
    val = link;

    console.log(val);


    /** Event Listener **/

    // document.querySelector('.clear-tasks').addEventListener('click', function(e) {
    //     console.log('Hello World');
    //
    //     e.preventDefault(); // prevent default link behaviour
    // })

    document.querySelector('.clear-tasks').addEventListener('click', onClick);

    function onClick(e){
        let val;
        val = e;
        e.preventDefault();
        // Event target element
        val = e.target;
        val = e.target.id;
        val = e.target.className;
        val = e.target.classList;

        e.target.innerText = 'Hello';

        // Event Type
        val = e.type;

        // Timestamp
        val = e.timeStamp;

        // Coords event relative to the window
        val = e.clientY;
        val = e.clientX;

        // coords event relative to the element
        val = e.offsetY;
        val = e.offsetX;

        console.log(val);

    }

/** Mouse Event **/

    const clearBtn = document.querySelector('.clear-tasks');
    const card = document.querySelector('.card');
    const heading = document.querySelector('h5');

    // click
    clearBtn.addEventListener('click', runEvent);

    //double click
    clearBtn.addEventListener('dblclick', runEvent);

    //Mouse down
    clearBtn.addEventListener('mousedown', runEvent);

    //Mouse up
    clearBtn.addEventListener('mouseup', runEvent);

    // Mouse Enter
    card.addEventListener('mouseenter', runEvent);

    // Mouseleave (it will fire outside the parent)
    card.addEventListener('mouseleave', runEvent);

    //Mouseout
    card.addEventListener('mouseout', runEvent);

    // Mouseover
    card.addEventListener('mouseover', runEvent);

    // Mousemove
    card.addEventListener('mousemove', runEvent);




    // Event Handler
    function runEvent(e) {
        console.log(`Event type: ${e.type}`);
        e.preventDefault();
    }

    function runEvent(e) {
        heading.textContent = `MouseX: ${e.offsetX} MouseY: ${e.offsetY}`;
        document.body.style.backgroundColor = `rgb(${e.offsetX},${e.offsetY},40)`;
    }

/** Keyboard and Input Events **/

    const form = document.querySelector('form');
    const taskInput = document.getElementById('task');
    const heading = document.querySelector('h5');
    const select = document.querySelector('select');
    // Clear input
    taskInput.value = '';

    // form.addEventListener('submit', runEvent);

    //Keydown
    taskInput.addEventListener('keydown', runEvent);

    //keyup
    taskInput.addEventListener('keyup', runEvent);

    //keypress
    taskInput.addEventListener('keypress', runEvent);

    //focus
    taskInput.addEventListener('focus', runEvent);

    //blur
    taskInput.addEventListener('blue', runEvent);

    //cut
    taskInput.addEventListener('cut', runEvent);

    //paste
    taskInput.addEventListener('paste', runEvent);

    //Input
    taskInput.addEventListener('input', runEvent);

    // change
    select.addEventListener('change', runEvent);

    function runEvent(e){
        console.log(`Event Type: ${e.type}`);
        console.log(e.target.value);

        // console.log(e.target.value);

        // heading.innerText = e.target.value;
        //Get input value
        // console.log(taskInput.value);
        // e.preventDefault();
    }

/** Event bubbling and delegation **/

    // Event bubbling

    document.querySelector('.card-title').addEventListener('click',
    function() {
        console.log('card-title');
    });

    document.querySelector('.card-content').addEventListener('click',
    function() {
        console.log('card-content');
    });

    document.querySelector('.card').addEventListener('click',
    function() {
        console.log('card');
    });

    document.querySelector('.col').addEventListener('click',
    function() {
        console.log('col');
    });

    const deleteItem = document.querySelector('.delete-item');
    deleteItem.addEventListener('click', delItem);

    document.body.addEventListener('click', delItem);

// Event Delegation

    function delItem(e) {
        // if(e.target.parentElement.className === 'delete-item secondary-content') {
        //     console.log('delete item');
        // }

        if(e.target.parentElement.classList.contains('delete-item')) {
            console.log('delete item');
            e.target.parentElement.parentElement.remove();
        }
    }

/** Local Session and Storage **/
// set local storage item
localStorage.setItem('name', 'John');
localStorage.setItem('age', '30');

// set session stroage item
sessionStorage.setItem('name', 'Dennis');

// Remove from the storage
localStorage.removeItem('name');

// get from storage
const name = localStorage.getItem('name');
const age = localStorage.getItem('age');

//clear local storage
localStorage.clear();
console.log(name);

/** Storage **/

    document.querySelector('form').addEventListener('submit',
    function(e){
        const task = document.getElementById('task').value;

        let tasks;

        if(localStorage.getItem('tasks') === null) {
            tasks = [];
        } else {
            tasks = JSON.parse(localStorage.getItem('tasks'));
        }

        tasks.push(task);

        localStorage.setItem('tasks', JSON.stringify(tasks));

        alert('Tasks Saved!');
        e.preventDefault();
    });

    const tasks = JSON.parse(localStorage.getItem('tasks'));
    tasks.forEach(function(task) {
        console.log(task);
    });
